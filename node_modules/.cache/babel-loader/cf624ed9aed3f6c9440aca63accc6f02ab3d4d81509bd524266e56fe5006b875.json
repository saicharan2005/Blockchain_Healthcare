{"ast":null,"code":"var _jsxFileName = \"/Users/rakeshkunduru/Downloads/Blockchain-Healthcare-main/src/Healthcare.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Healthcare = () => {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isOwner, setIsOwner] = useState(null);\n  const [patientID, setPatientID] = useState(\"\");\n  const [diagnosis, setDiagnosis] = useState(\"\");\n  const [treatment, setTreatment] = useState(\"\");\n  const [patientRecords, setPatientRecords] = useState([]);\n  const [providerAddress, setProviderAddress] = useState(\"\");\n  const contractAddress = \"0x5B38Da6a701c568545dCfcB03FcB875f56beddC4\";\n  const contractABI = [{\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"patientID\",\n      type: \"uint256\"\n    }, {\n      internalType: \"string\",\n      name: \"patientName\",\n      type: \"string\"\n    }, {\n      internalType: \"string\",\n      name: \"diagnosis\",\n      type: \"string\"\n    }, {\n      internalType: \"string\",\n      name: \"treatment\",\n      type: \"string\"\n    }],\n    name: \"addRecord\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"provider\",\n      type: \"address\"\n    }],\n    name: \"authorizeProvider\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"getOwner\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"patientID\",\n      type: \"uint256\"\n    }],\n    name: \"getPatientRecords\",\n    outputs: [{\n      components: [{\n        internalType: \"uint256\",\n        name: \"recordID\",\n        type: \"uint256\"\n      }, {\n        internalType: \"string\",\n        name: \"patientName\",\n        type: \"string\"\n      }, {\n        internalType: \"string\",\n        name: \"diagnosis\",\n        type: \"string\"\n      }, {\n        internalType: \"string\",\n        name: \"treatment\",\n        type: \"string\"\n      }, {\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct HealthcareRecords.Record[]\",\n      name: \"\",\n      type: \"tuple[]\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }];\n  useEffect(() => {\n    const connectWallet = async () => {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        setProvider(provider);\n        setSigner(signer);\n        const accountAddress = await signer.getAddress();\n        setAccount(accountAddress);\n        console.log(accountAddress);\n        const contract = new ethers.Contract(contractAddress, contractABI, signer);\n        setContract(contract);\n        const ownerAddress = await contract.getOwner();\n        setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\n      } catch (error) {\n        console.error(\"Error connecting to wallet: \", error);\n      }\n    };\n    connectWallet();\n  }, []);\n  const fetchPatientRecords = async () => {\n    try {\n      const records = await contract.getPatientRecords(patientID);\n      console.log(records);\n      setPatientRecords(records);\n    } catch (error) {\n      console.error(\"Error fetching patient records\", error);\n    }\n  };\n  const addRecord = async () => {\n    try {\n      const tx = await contract.addRecord(patientID, \"Alice\", diagnosis, treatment);\n      await tx.wait();\n      fetchPatientRecords();\n      await tx.wait();\n      alert(`Provider ${providerAddress} authorized successfully`);\n    } catch (error) {\n      console.error(\"Error adding records\", error);\n    }\n  };\n  const authorizeProvider = async () => {\n    if (isOwner) {\n      try {\n        const tx = await contract.authorizeProvider(providerAddress);\n        await tx.wait();\n        alert(`Provider ${providerAddress} authorized successfully`);\n      } catch (error) {\n        console.error(\"Only contract owner can authorize different providers\");\n      }\n    } else {\n      alert(\"Only contract owner can call this function\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"HealthCare Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), account && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"account-info\",\n      children: [\"Connected Account: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 19\n    }, this), isOwner && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"owner-info\",\n      children: \"You are the contract owner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Fetch Patient Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Enter Patient ID\",\n        value: patientID,\n        onChange: e => setPatientID(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: fetchPatientRecords,\n        children: \"Fetch Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Patient Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Diagnosis\",\n        value: diagnosis,\n        onChange: e => setDiagnosis(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Treatment\",\n        value: treatment,\n        onChange: e => setTreatment(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: addRecord,\n        children: \"Add Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Authorize HealthCare Provider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Provider Address\",\n        value: providerAddress,\n        onChange: e => setProviderAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: authorizeProvider,\n        children: \"Authorize Provider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"records-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Patient Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), patientRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Record ID: \", record.recordID.toNumber()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Diagnosis: \", record.diagnosis]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Treatment: \", record.treatment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Timestamp:\", \" \", new Date(record.timestamp.toNumber() * 1000).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n_s(Healthcare, \"BfXbqc9/esHfOHnXwPVx/g7kWAM=\");\n_c = Healthcare;\nexport default Healthcare;\nvar _c;\n$RefreshReg$(_c, \"Healthcare\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","Healthcare","_s","provider","setProvider","signer","setSigner","contract","setContract","account","setAccount","isOwner","setIsOwner","patientID","setPatientID","diagnosis","setDiagnosis","treatment","setTreatment","patientRecords","setPatientRecords","providerAddress","setProviderAddress","contractAddress","contractABI","inputs","stateMutability","type","internalType","name","outputs","components","connectWallet","providers","Web3Provider","window","ethereum","send","getSigner","accountAddress","getAddress","console","log","Contract","ownerAddress","getOwner","toLowerCase","error","fetchPatientRecords","records","getPatientRecords","addRecord","tx","wait","alert","authorizeProvider","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onClick","map","record","index","recordID","toNumber","Date","timestamp","toLocaleString","_c","$RefreshReg$"],"sources":["/Users/rakeshkunduru/Downloads/Blockchain-Healthcare-main/src/Healthcare.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst Healthcare = () => {\r\n  const [provider, setProvider] = useState(null);\r\n  const [signer, setSigner] = useState(null);\r\n  const [contract, setContract] = useState(null);\r\n  const [account, setAccount] = useState(null);\r\n  const [isOwner, setIsOwner] = useState(null);\r\n  const [patientID, setPatientID] = useState(\"\");\r\n  const [diagnosis, setDiagnosis] = useState(\"\");\r\n  const [treatment, setTreatment] = useState(\"\");\r\n  const [patientRecords, setPatientRecords] = useState([]);\r\n\r\n  const [providerAddress, setProviderAddress] = useState(\"\");\r\n  const contractAddress = \"0x5B38Da6a701c568545dCfcB03FcB875f56beddC4\";\r\n\r\n  const contractABI = [\r\n    {\r\n      inputs: [],\r\n      stateMutability: \"nonpayable\",\r\n      type: \"constructor\",\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: \"uint256\",\r\n          name: \"patientID\",\r\n          type: \"uint256\",\r\n        },\r\n        {\r\n          internalType: \"string\",\r\n          name: \"patientName\",\r\n          type: \"string\",\r\n        },\r\n        {\r\n          internalType: \"string\",\r\n          name: \"diagnosis\",\r\n          type: \"string\",\r\n        },\r\n        {\r\n          internalType: \"string\",\r\n          name: \"treatment\",\r\n          type: \"string\",\r\n        },\r\n      ],\r\n      name: \"addRecord\",\r\n      outputs: [],\r\n      stateMutability: \"nonpayable\",\r\n      type: \"function\",\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: \"address\",\r\n          name: \"provider\",\r\n          type: \"address\",\r\n        },\r\n      ],\r\n      name: \"authorizeProvider\",\r\n      outputs: [],\r\n      stateMutability: \"nonpayable\",\r\n      type: \"function\",\r\n    },\r\n    {\r\n      inputs: [],\r\n      name: \"getOwner\",\r\n      outputs: [\r\n        {\r\n          internalType: \"address\",\r\n          name: \"\",\r\n          type: \"address\",\r\n        },\r\n      ],\r\n      stateMutability: \"view\",\r\n      type: \"function\",\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: \"uint256\",\r\n          name: \"patientID\",\r\n          type: \"uint256\",\r\n        },\r\n      ],\r\n      name: \"getPatientRecords\",\r\n      outputs: [\r\n        {\r\n          components: [\r\n            {\r\n              internalType: \"uint256\",\r\n              name: \"recordID\",\r\n              type: \"uint256\",\r\n            },\r\n            {\r\n              internalType: \"string\",\r\n              name: \"patientName\",\r\n              type: \"string\",\r\n            },\r\n            {\r\n              internalType: \"string\",\r\n              name: \"diagnosis\",\r\n              type: \"string\",\r\n            },\r\n            {\r\n              internalType: \"string\",\r\n              name: \"treatment\",\r\n              type: \"string\",\r\n            },\r\n            {\r\n              internalType: \"uint256\",\r\n              name: \"timestamp\",\r\n              type: \"uint256\",\r\n            },\r\n          ],\r\n          internalType: \"struct HealthcareRecords.Record[]\",\r\n          name: \"\",\r\n          type: \"tuple[]\",\r\n        },\r\n      ],\r\n      stateMutability: \"view\",\r\n      type: \"function\",\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const connectWallet = async () => {\r\n      try {\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        await provider.send(\"eth_requestAccounts\", []);\r\n        const signer = provider.getSigner();\r\n        setProvider(provider);\r\n        setSigner(signer);\r\n\r\n        const accountAddress = await signer.getAddress();\r\n        setAccount(accountAddress);\r\n\r\n        console.log(accountAddress);\r\n\r\n        const contract = new ethers.Contract(\r\n          contractAddress,\r\n          contractABI,\r\n          signer\r\n        );\r\n        setContract(contract);\r\n\r\n        const ownerAddress = await contract.getOwner();\r\n\r\n        setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\r\n      } catch (error) {\r\n        console.error(\"Error connecting to wallet: \", error);\r\n      }\r\n    };\r\n    connectWallet();\r\n  }, []);\r\n\r\n  const fetchPatientRecords = async () => {\r\n    try {\r\n      const records = await contract.getPatientRecords(patientID);\r\n      console.log(records);\r\n      setPatientRecords(records);\r\n    } catch (error) {\r\n      console.error(\"Error fetching patient records\", error);\r\n    }\r\n  };\r\n\r\n  const addRecord = async () => {\r\n    try {\r\n      const tx = await contract.addRecord(\r\n        patientID,\r\n        \"Alice\",\r\n        diagnosis,\r\n        treatment\r\n      );\r\n      await tx.wait();\r\n      fetchPatientRecords();\r\n      await tx.wait();\r\n      alert(`Provider ${providerAddress} authorized successfully`);\r\n    } catch (error) {\r\n      console.error(\"Error adding records\", error);\r\n    }\r\n  };\r\n\r\n  const authorizeProvider = async () => {\r\n    if (isOwner) {\r\n      try {\r\n        const tx = await contract.authorizeProvider(providerAddress);\r\n        await tx.wait();\r\n        alert(`Provider ${providerAddress} authorized successfully`);\r\n      } catch (error) {\r\n        console.error(\"Only contract owner can authorize different providers\");\r\n      }\r\n    } else {\r\n      alert(\"Only contract owner can call this function\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"title\">HealthCare Application</h1>\r\n      {account && <p className=\"account-info\">Connected Account: {account}</p>}\r\n      {isOwner && <p className=\"owner-info\">You are the contract owner</p>}\r\n\r\n      <div className=\"form-section\">\r\n        <h2>Fetch Patient Records</h2>\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"text\"\r\n          placeholder=\"Enter Patient ID\"\r\n          value={patientID}\r\n          onChange={(e) => setPatientID(e.target.value)}\r\n        />\r\n        <button className=\"action-button\" onClick={fetchPatientRecords}>\r\n          Fetch Records\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"form-section\">\r\n        <h2>Add Patient Record</h2>\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"text\"\r\n          placeholder=\"Diagnosis\"\r\n          value={diagnosis}\r\n          onChange={(e) => setDiagnosis(e.target.value)}\r\n        />\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"text\"\r\n          placeholder=\"Treatment\"\r\n          value={treatment}\r\n          onChange={(e) => setTreatment(e.target.value)}\r\n        />\r\n        <button className=\"action-button\" onClick={addRecord}>\r\n          Add Records\r\n        </button>\r\n      </div>\r\n      <div className=\"form-section\">\r\n        <h2>Authorize HealthCare Provider</h2>\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"text\"\r\n          placeholder=\"Provider Address\"\r\n          value={providerAddress}\r\n          onChange={(e) => setProviderAddress(e.target.value)}\r\n        />\r\n        <button className=\"action-button\" onClick={authorizeProvider}>\r\n          Authorize Provider\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"records-section\">\r\n        <h2>Patient Records</h2>\r\n        {patientRecords.map((record, index) => (\r\n          <div key={index}>\r\n            <p>Record ID: {record.recordID.toNumber()}</p>\r\n            <p>Diagnosis: {record.diagnosis}</p>\r\n            <p>Treatment: {record.treatment}</p>\r\n            <p>\r\n              Timestamp:{\" \"}\r\n              {new Date(record.timestamp.toNumber() * 1000).toLocaleString()}\r\n            </p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Healthcare;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}